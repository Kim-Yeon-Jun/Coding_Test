<최단경로>
최단거리 알고리즘 : 다익스트라 최단 경로 알고리즘, 플로이드 워셜, 벨만 포드 알고리즘

다익스트라 최단 경로 알고리즘>
특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘
음의 간선이 없을 때 정상적으로 작동(음의 간선 : 0보다 작은 값을 가지는 간선) _ex) GPS
매번  '가장 비용이 적은 노드'를 선택해서 임의의 과정을 반복. (일종의 그리디 알고리즘)
1. 출발 노드 설정
2. 최단 거리 테이블을 초기화
3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택
4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신
5. 3, 4번 과정을 반복

'각 노드에 대한 현재까지의 최단 거리' 정보를 항상 1차원 리스트에 저장하며 리스트를 계속 갱신
매번 현재 처리하고 있는 노드를 기준으로 주변 간선을 확인

구현방법 2가지
1. 구현은 쉽지만 느리게 동작하는 코드
2. 구현하긴 조금 까다롭지만 빠르게 동작하는 코드
: 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것!

=====
플로이드 워셜 알고리즘 (다이나믹 프로그래밍)
: 모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우
'거쳐 가는 노드'를 기준으로 알고리즘 수행.
매번 방문하지 않은 노드중에서 최단 거리를 갖는 노드를 찾을 필요가 없다
2차원 리스트에 '최단 거리' 정보를 저장한다.
'바로 이동하는 거리'가 '특정한 노드를 거쳐서 이동하는 거리'보다 더 많은 비용을 가진다면 이중 더 짧은 것으로 갱신한다.
(예시 : 4개의 노드가 존재할 때 각각의 노드에서 다이랙트로 연결된 간선들에 대한 이동 비용을 2차원 리스트로 저장
 4개의 노드들에 대하여 순차적으로 거쳐서 이동하는 경우에 대해 계산하고 기존의 비용과 비교하여 min에 해당하는 값을 새롭게 저장해준다.
 if 1번 노드를 거치는 경우 D23 = min(D23, D21 + D13)으로 표현할 수 있다.)
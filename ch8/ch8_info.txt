다이나믹 프로그래밍 : 한번 계산한 문제는 다시 계산하지 않는 알고리즘

중복되는 연산 줄이기
컴퓨터를 활용해도 해결하기 어려운 문제 : 시간이 많이 필요한 것. 메모리 공간이 많이 필요한 것.

dynamic : ' 프로그램이 실행되는 도중에 ' 라는 의미

ex. 피보나치 수열 (수열을 배열이나 리스트로 표현이 가능함) : 연속된 많은 데이터를 처리한다.

피보나치 함수를 재귀 함수를 사용하여 표현할 수 있다.
하지만 n의 값이 커질수록 수행 시간이 기하급수적으로 증가함.
=> 이미 계산해 놨던 값을 다시 계산해서 사용하는 중복되는 과정이 다수 발생함.

->다이나믹 프로그래밍 사용 조건(항상 사용할 수 있는 것은 아님)
1. 큰 문제를 작은 문제로 나눌 수 있다.
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

메모이제이션 : 다이나믹 프로그래밍 구현 방법 중 하나.
한번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법
값을 저장하는 방법 = 캐싱 이라고도 함.

실제 코드에서 구현 : 한번 구한 정보를 리스트에 저장하는 것.
재귀적으로 수행하다가 같은 정보가 필요할 때 정답을 그대로 리스트에서 가져옴.

퀵 정렬 : 정렬을 수행할 때 정렬할 리스트를 분할하여 전체적으로 정렬이 될 수 있도록 한다.(=분할 정복:문제들이 서로 독립적)
다이나믹 프로그래밍 : 문제들이 서로 영향을 미치고 있음.

일반적으로 재귀함수보다는 반복문을 사용한 코드가 더 성능이 좋다.

탑다운 방식(하향식) : 재귀함수를 이용하여 다이나믹 프로그래밍 소스코드를 작성하는 방법(큰 문제를 해결하기 위하여 작은 문제를 호출한다)
메모이제이션은 탑다운 방식에 국한되어 사용되는 표현
메모이제이션의 경우 dict 자료형도 사용 가능(연속적이지 않은 경우에 유용함.)

☆보텀업 방식(상향식) : 단순히 반복문을 이용하여 소스코드를 작성하는 경우 작은 문제부터 차근차근 답을 도출함 
결과 저장용 리스트를 DP 테이블이라고 부름

완전 탐색으로 접근하였을 때 시간이 매우 오래 걸리면 다이나믹 프로그래밍을 적용할 수 있는지 생각해보자!(부분 문제들의 중복 여부 체크)